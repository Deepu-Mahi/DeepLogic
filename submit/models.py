from django.db import models
from django.contrib.auth.models import User  

# ----------------------------------------
# Model: CodeSubmission
# Stores user-submitted code solutions and results
# ----------------------------------------
class CodeSubmission(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)  
    # The user who submitted this code
    
    problem = models.ForeignKey('Problem', on_delete=models.CASCADE, null=True, blank=True)  
    # Related problem (optional, because some submissions may be standalone)
    
    language = models.CharField(max_length=20)  
    # Programming language used (e.g., Python, C++, Java)
    
    code = models.TextField()  
    # The source code submitted by the user
    
    input_data = models.TextField(blank=True, null=True)  
    # Optional input data used during code execution
    
    output = models.TextField(blank=True, null=True)  
    # Output generated by the code execution
    
    errors = models.TextField(blank=True, null=True)  
    # Any compilation/runtime errors
    
    created_at = models.DateTimeField(auto_now_add=True)  
    # Timestamp when submission was created
    
    def __str__(self):
        # Return a concise string representation for easy identification
        return f"{self.user.username} - {self.language} - {self.created_at.strftime('%Y-%m-%d %H:%M')}"

# ----------------------------------------
# Model: Problem
# Defines a coding problem with metadata and examples
# ----------------------------------------
class Problem(models.Model):
    # Difficulty levels for problems
    DIFFICULTY_LEVELS = [
        ('Easy', 'Easy'),
        ('Medium', 'Medium'),
        ('Hard', 'Hard'),
    ]

    # Topics/categories to classify problems
    TOPIC_CHOICES = [
        ('Arrays', 'Arrays'),
        ('Strings', 'Strings'),
        ('Math', 'Math'),
        ('Recursion', 'Recursion'),
        ('Sorting', 'Sorting'),
        ('Searching', 'Searching'),
        ('Dynamic Programming', 'Dynamic Programming'),
        ('Greedy', 'Greedy'),
        ('Graphs', 'Graphs'),
        ('Trees', 'Trees'),
        ('Bit Manipulation', 'Bit Manipulation'),
        ('Two Pointers', 'Two Pointers'),
    ]

    title = models.CharField(max_length=200)  
    # Problem title
    
    description = models.TextField()  
    # Detailed problem statement
    
    input_format = models.TextField()  
    # Description of input format
    
    output_format = models.TextField()  
    # Description of output format
    
    sample_input = models.TextField()  
    # Sample input example
    
    sample_output = models.TextField()  
    # Sample output example
    
    difficulty = models.CharField(max_length=10, choices=DIFFICULTY_LEVELS)  
    # Difficulty level selection
    
    topic = models.CharField(max_length=50, choices=TOPIC_CHOICES, default='Arrays')  
    # Problem topic/category
    
    def __str__(self):
        return self.title

# ----------------------------------------
# Model: TestCase
# Input-output pairs to automatically test user solutions
# ----------------------------------------
class TestCase(models.Model):
    problem = models.ForeignKey(Problem, on_delete=models.CASCADE, related_name='test_cases')  
    # Link to the problem this test case belongs to
    
    input_data = models.TextField()  
    # Input data for the test case
    
    expected_output = models.TextField()  
    # Expected output for the given input
    
    def __str__(self):
        # Identify test cases by their problem
        return f"Test Case for {self.problem.title}"
